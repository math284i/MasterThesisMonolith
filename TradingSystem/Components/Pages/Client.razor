@page "/"
@using TradingSystem.Data
@using TradingSystem.DTO
@using TradingSystem.Logic
@using TradingSystem.Setup
@inject JsLogger Logger
@inject IClient ClientService
@inject IMessageBus MessageBus
@rendermode InteractiveServer

<link rel="stylesheet" href="Styles/ClientStyle.css">

<div class="container">
    <header class="header">
        <h1>Stock Trading Dashboard</h1>
    </header>
    
    <div class="card">

        @if (!_isAuthenticated)
        {
            <div class="auth-container">
                <p>Enter your access code to continue:</p>
                <div class="input-group">
                    <input type="password" class="input-field" @bind="clientId" />
                </div>
                <button class="login-btn" @onclick="Login">
                    <span class="material-icons">Login</span>
                </button>
            </div>
        }
        else
        {
            <div class="content">
                <h3>Logged in as <span class="highlight">@clientId</span></h3>
                <div class="stocks-container">
                    <!-- Stock Selection -->
                    <div class="stock-selection">
                        <h4 class="section-title">Select stocks to stream prices</h4>
                        <div class="stock-grid">
                            @foreach (var stock in stocks[clientId])
                            {
                                <div class="stock-item">
                                    <input type="checkbox" class="stock-checkbox" @bind="stock.EnableLivePrices" @bind:after="() => UpdateSelectedStocks(stock)" />
                                    <label class="stock-label">@stock.InstrumentId</label>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Selected Stocks -->
                    <div class="selected-stocks">
                        <h4 class="section-title">Selected Stocks</h4>

                        @if (selectedStocksPerClient.Any())
                        {
                            <div class="stock-list">
                                <ul>
                                    @foreach (var stock in selectedStocksPerClient[clientId])
                                    {
                                        <li class="selected-stock-item">
                                            <span class="stock-name">@stock.InstrumentId</span>
                                            <span class="stock-price">@(stock.Price == 0 ? "Price is yet to come" : stock.Price.ToString("C"))</span>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        else
                        {
                            <p class="no-stocks">No stocks selected.</p>
                        }
                    </div>
                </div>
            </div>
            @if (_isDevelopment)
            {
                <h3>Put new price on bus:</h3>
                <input class="input-field" @bind="_developmentInstrumentId" />
                <input class="input-field" @bind="_developmentPrice" />
                <button class="login-btn" @onclick="SimulateNewPrice">
                    <span class="material-icons">Put price</span>
                </button>
            }
        }
    </div>
</div>

@code {
    private Dictionary<string, HashSet<StockOptions>> stocks = new();
    private bool _isInitialized = false;
    private bool _isAuthenticated = false;
    private bool _isDevelopment = true;
    private string _developmentInstrumentId = "";
    private float _developmentPrice = 0.0f;
    private string clientId = "";
    private Dictionary<string, List<StockOptions>> selectedStocksPerClient = new();

    private async Task Login()
    {
        _isAuthenticated = true;
        stocks[clientId] = ClientService.GetStockOptions<HashSet<StockOptions>>(stockOptions =>
        {
            stocks[clientId] = stockOptions;
        });
        
        if (!selectedStocksPerClient.ContainsKey(clientId))
        {
            selectedStocksPerClient[clientId] = new List<StockOptions>();
        }

        await Logger.LogAsync("Started session for user: " + clientId);
        _isInitialized = true;
    }
    
    private void UpdateSelectedStocks(StockOptions stock)
    {
        var info = new StreamInformation
        {
            ClientId = clientId,
            EnableLivePrices = stock.EnableLivePrices,
            InstrumentId = stock.InstrumentId
        };
        
                
        var selectedStocks = selectedStocksPerClient[clientId];
        if (stock.EnableLivePrices)
        {
            if (!selectedStocks.Any(s => s.InstrumentId == stock.InstrumentId))
            {
                selectedStocks.Add(stock);
            }
        }
        else
        {
            selectedStocks.RemoveAll(s => s.InstrumentId == stock.InstrumentId);
        }

        var stockTopic = TopicGenerator.TopicForClientInstrumentPrice(info.InstrumentId);
        if (info.EnableLivePrices)
        {
            MessageBus.Subscribe<StockOptions>(stockTopic, clientId, TmpUpdatePrice);
        }
        else
        {
            MessageBus.Unsubscribe(stockTopic, clientId);
        }
        
        if (!selectedStocksPerClient.ContainsKey(clientId))
        {
            selectedStocksPerClient[clientId] = new List<StockOptions>();
        }
    }

    private async void TmpUpdatePrice(StockOptions stock)
    {

        if (!selectedStocksPerClient.TryGetValue(clientId, out var selectedStocks)) return;

        var matchingStock = selectedStocks.SingleOrDefault(s => s.InstrumentId == stock.InstrumentId);
        
        if (matchingStock == null) return;
        matchingStock.Price = stock.Price;
        await InvokeAsync(StateHasChanged);
    }

    private void UpdatePrice(StreamInformation streamInformation, float price)
    {
        if (streamInformation.ClientId != clientId) return;

        if (!selectedStocksPerClient.TryGetValue(clientId, out var selectedStocks)) return;

        var matchingStock = selectedStocks.SingleOrDefault(s => s.InstrumentId == streamInformation.InstrumentId);

        if (matchingStock != null)
        {
            matchingStock.Price = price;
        }
    }
    
    private void SimulateNewPrice()
    {
        var stock = new StockOptions
        {
            InstrumentId = _developmentInstrumentId,
            Price = _developmentPrice
        };
        var stockTopic = TopicGenerator.TopicForMarketInstrumentPrice(stock.InstrumentId);
        MessageBus.Publish(stockTopic, stock);
    }
}
