@page "/"
@using System.Diagnostics.CodeAnalysis
@using TradingSystem.Data
@using TradingSystem.DTO
@using TradingSystem.Logic
@using TradingSystem.Setup
@using Console = System.Console
@inject JsLogger Logger
@inject IClient ClientService
@inject IMessageBus MessageBus
@rendermode InteractiveServer
@inherits LayoutComponentBase
@inject ToastService ToastService

<link rel="stylesheet" href="Styles/ClientStyle.css">

<div class="container">
    <header class="header">
        <h1>Stock Trading Dashboard</h1>
    </header>

    <div class="card">

        @if (!_isAuthenticated)
        {
            <div class="auth-container">
                <p>Enter your access code to continue:</p>
                <div class="input-group">
                    <input class="input-field" @bind="_clientUsername"/>
                    <input type="password" class="input-field" @bind="_clientPassword"/>
                </div>
                <button class="login-btn" @onclick="Login">
                    <span class="material-icons">Log in</span>
                </button>
            </div>
        }
        else
        {
            <div class="content">
                <h3>Logged in as <span class="highlight">@_clientUsername</span></h3>
                <div class="stocks-container">
                    <!-- Stock Selection -->
                    <div class="stock-selection">
                        <h4 class="section-title">Select stocks to stream prices</h4>
                        <div class="stock-grid">
                            @foreach (var stock in stocks[_clientId])
                            {
                                <div class="stock-item">
                                    <input type="checkbox" class="stock-checkbox" @onchange="(args) => UpdateSelectedStocks(args, stock)" />
                                    <label class="stock-label">@stock.InstrumentId</label>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Selected Stocks -->
                    <div class="selected-stocks">
                        <h4 class="section-title">Selected Stocks</h4>

                        @if (_selectedStocksPerClient.Any())
                        {
                            <div class="stock-list">
                                <ul>
                                    @foreach (var stock in _selectedStocksPerClient[_clientId])
                                    {
                                        <li class="selected-stock-item">
                                            <span class="stock-name">@stock.InstrumentId</span>
                                            <span class="stock-price">@(stock.Price == 0 ? "Price is yet to come" : stock.Price.ToString("C"))</span>
                                            @if (stock.Price != 0)
                                            {
                                                <input type="number" class="quantity-input" min="1" @bind="stock.Size"/>

                                                <button class="buy-btn" @onclick="() => BuyStock(stock)">
                                                    Buy
                                                </button>
                                            }
                                            else
                                            {

                                            }
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        else
                        {
                            <p class="no-stocks">No stocks selected.</p>
                        }
                    </div>
                </div>
            </div>
            
            <div class="holdings-section">
                <h4 class="section-title">Your Holdings</h4>

                @if (_holdings.Any())
                {
                    <table class="holdings-table">
                        <thead>
                        <tr>
                            <th>Instrument</th>
                            <th>Amount</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var holding in _holdings)
                        {
                            <tr>
                                <td>@holding.InstrumentId</td>
                                <td>@holding.Size</td>

                                <input type="number" class="quantity-input" min="1"/>
                                
                                <button class="buy-btn" @onclick="() => SellStock(holding)">
                                    Sell
                                </button>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="no-holdings">No holdings available.</p>
                }
            </div>
            
            @if (_isDevelopment)
            {
                <h5>@_tmpOrderstatus</h5>
                <h5>@_tmpErrorMessage</h5>
                <h3>Put new price on bus:</h3>
                <input class="input-field" @bind="_developmentInstrumentId" />
                <input class="input-field" @bind="_developmentPrice" />
                <button class="button simulate-btn" @onclick="SimulateNewPrice">
                    <span class="material-icons"></span> Simulate Price
                </button>
            }
            <button class="button logout-btn" @onclick="LogOut">
                <span class="material-icons"></span> Log Out
            </button>
        }
    </div>
</div>

@* <Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.BottomCenter" /> *@

@code {
    private Dictionary<Guid, HashSet<StockOptions>> stocks = new();
    private bool _isAuthenticated;
    private bool _isDevelopment = true;
    private string _developmentInstrumentId = "";
    private float _developmentPrice;
    private Guid _clientId;
    private string _clientUsername = "";
    private string _clientPassword = "";
    private string _tmpOrderstatus = "";
    private string _tmpErrorMessage = "";
    private readonly Dictionary<Guid, List<StockOptions>> _selectedStocksPerClient = new();
    private List<HoldingData> _holdings = new();

    private void Login()
    {
        ClientService.Login(_clientUsername, _clientPassword, LoginSuccess, UpdateHolding);
    }

    private void LoginSuccess(LoginInfo info)
    {
        _isAuthenticated = info.IsAuthenticated;
        if (_isAuthenticated)
        {
            _clientId = info.ClientId;
            stocks[_clientId] = ClientService.GetStockOptions<HashSet<StockOptions>>(stockOptions =>
            {
                stocks[_clientId] = stockOptions;
            });

            if (!_selectedStocksPerClient.ContainsKey(_clientId))
            {
                _selectedStocksPerClient[_clientId] = new List<StockOptions>();
            }
        } 
    }
    
    private void UpdateSelectedStocks(ChangeEventArgs args, StockOptions stock)
    {
        Console.WriteLine($"Updating stock: {stock.InstrumentId} enabled: {(bool)args.Value}");
        var enabled = (bool)(args.Value ?? false);
        var info = new StreamInformation
        {
            ClientId = _clientId,
            EnableLivePrices = enabled,
            InstrumentId = stock.InstrumentId
        };
        stock.EnableLivePrices = enabled;
        
        if (!_selectedStocksPerClient.ContainsKey(_clientId))
        {
            _selectedStocksPerClient[_clientId] = new List<StockOptions>();
        }
        
        var selectedStocks = _selectedStocksPerClient[_clientId];
        if (stock.EnableLivePrices)
        {
            if (!selectedStocks.Any(s => s.InstrumentId == stock.InstrumentId))
            {
                selectedStocks.Add(stock);
            }
        }
        else
        {
            selectedStocks.RemoveAll(s => s.InstrumentId == stock.InstrumentId);
        }
        
        ClientService.StreamPrice(info, UpdatePrice);
    }

    private async void UpdatePrice(StockOptions stock)
    {
        if (!_selectedStocksPerClient.TryGetValue(_clientId, out var selectedStocks)) return;

        var matchingStock = selectedStocks.SingleOrDefault(s => s.InstrumentId == stock.InstrumentId);
        
        if (matchingStock == null) return;
        matchingStock.Price = stock.Price;
        await InvokeAsync(StateHasChanged);
    }
    
    private void BuyStock(StockOptions stock)
    {
        if (stock.Price == 0)
        {
            Console.WriteLine("Cannot buy stock without a valid price.");
            return;
        }

        Console.WriteLine($"Buying {stock.Size} of {stock.InstrumentId} at {stock.Price:C} for client {_clientId.ToString()}");
        const OrderSide side = OrderSide.RightSided;
        var order = new Order
        {
            ClientId = _clientId,
            Side = side,
            Stock = stock
        };
        ClientService.HandleOrder(order, OrderHandled);
    }
    
    private void SellStock(HoldingData holdingData)
    {
        var stock = _selectedStocksPerClient[_clientId].Find(s => s.InstrumentId == holdingData.InstrumentId);
        if (stock == null) return; //TODO toast
        if (stock.Price == 0)
        {
            Console.WriteLine("Cannot buy stock without a valid price.");
            return;
        }

        Console.WriteLine($"Selling {stock.Size} of {stock.InstrumentId} at {stock.Price:C} for client {_clientId.ToString()}");
        const OrderSide side = OrderSide.LeftSided;
        var order = new Order
        {
            ClientId = _clientId,
            Side = side,
            Stock = stock
        };
        ClientService.HandleOrder(order, OrderHandled);
    }

    private void OrderHandled(Order order)
    {
        _tmpOrderstatus = order.Status.ToString();
        _tmpErrorMessage = order.ErrorMesssage;
    }

    private async void UpdateHolding(List<HoldingData> holdings)
    {
        Console.WriteLine($"UI updating holding! for client {_clientId} holdings: {holdings.Count}");
        _holdings = holdings;
        await InvokeAsync(StateHasChanged);
    }
    
    private async void SimulateNewPrice()
    {
        var stock = new StockOptions
        {
            InstrumentId = _developmentInstrumentId,
            Price = _developmentPrice
        };
        var stockTopic = TopicGenerator.TopicForMarketInstrumentPrice(stock.InstrumentId);
        MessageBus.Publish(stockTopic, stock);
 
        await ToastService.Success("Success", "New price successfully put on the bus", autoHide: true);
    }

    private void LogOut()
    {
        ClientService.Logout(LogOutSuccess);
    }
    
    private void LogOutSuccess(bool authenticated)
    {
        _isAuthenticated = authenticated;
        
    }
}