@page "/"
@using TradingSystem.Data
@using TradingSystem.Logic
@using TradingSystem.Setup
@inject JsLogger Logger
@inject IClient ClientService
@rendermode InteractiveServer

<link rel="stylesheet" href="Styles/ClientStyle.css">

<div class="container">
    <header class="header">
        <h1>Stock Trading Dashboard</h1>
    </header>
    
    <div class="card">

        @if (!_isAuthenticated)
        {
            <div class="auth-container">
                <p>Enter your access code to continue:</p>
                <div class="input-group">
                    <input type="password" class="input-field" @bind="clientId" />
                </div>
                <button class="login-btn" @onclick="Login">
                    <span class="material-icons">Login</span>
                </button>
            </div>
        }
        else
        {
            <div class="content">
                <h3>Logged in as <span class="highlight">@clientId</span></h3>
                <div class="stocks-container">
                    <!-- Stock Selection -->
                    <div class="stock-selection">
                        <h4 class="section-title">Select stocks to stream prices</h4>
                        <div class="stock-grid">
                            @foreach (var stock in stocks)
                            {
                                <div class="stock-item">
                                    <input type="checkbox" class="stock-checkbox" @bind="stock.EnableLivePrices" @bind:after="UpdateSelectedStocks" />
                                    <label class="stock-label">@stock.InstrumentId</label>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Selected Stocks -->
                    <div class="selected-stocks">
                        <h4 class="section-title">Selected Stocks</h4>

                        @if (selectedStocks.Any())
                        {
                            <div class="stock-list">
                                <ul>
                                    @foreach (var stock in selectedStocks)
                                    {
                                        <li class="selected-stock-item">
                                            <span class="stock-name">@stock.InstrumentId</span>
                                            <span class="stock-price">@stock.Price.ToString("C")</span>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        else
                        {
                            <p class="no-stocks">No stocks selected.</p>
                        }
                    </div>
                </div>
                <button class="simulate-btn" @onclick="SimulatePriceChange">
                    <span class="material-icons">Simulate Price Change</span>
                </button>
            </div>
        }
    </div>
</div>

@code {
    private HashSet<StockOptions> stocks = new();
    private bool _isInitialized = false;
    private bool _isAuthenticated = false;
    private HashSet<StockOptions> selectedStocks = new();
    private string clientId = "";
    private float counter = 0.0f;

    private async Task Login()
    {
        _isAuthenticated = true;
        stocks = ClientService.GetStockOptions();
        await Logger.LogAsync("Started session for user: " + clientId);
        _isInitialized = true;
    }
    
    private void UpdateSelectedStocks()
    {
        selectedStocks = stocks.Where(s => s.EnableLivePrices).ToHashSet();
    }

    private void UpdatePrice(string localClientId, string instrumentId, float price)
    {
        if (localClientId != clientId) return;
        var matchingStock = selectedStocks.SingleOrDefault(s => s.InstrumentId == instrumentId);

        if (matchingStock != null)
        {
            matchingStock.Price = price;
        }
    }

    private void SimulatePriceChange()
    {
        counter++;
        UpdatePrice(clientId, "GME", counter);
    }
}
