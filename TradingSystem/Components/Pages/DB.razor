@page "/DB"
@using TradingSystem.Logic
@using TradingSystem.Data
@inject IDBHandler DbHandler

<link rel="stylesheet" href="Styles/DBStyle.css">

<div class="container">
    <h3 class="page-title">Clients and Holdings</h3>

    @if (clients == null)
    {
        <p class="loading-text">Loading...</p>
    }
    else
    {
        <div class="table-container">
            <table class="clients-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Balance</th>
                        <th>Tier</th>
                        <th>Holdings</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var client in clients)
                    {
                        <tr>
                            <td>@client.Name</td>
                            <td>@client.Balance.ToString("C")</td>
                            <td>@client.Tier</td>
                            <td>
                                @if (holdings.TryGetValue(client.ClientId, out var clientHoldings) && clientHoldings.Any())
                                {
                                    <ul class="holdings-list">
                                        @foreach (var holding in clientHoldings)
                                        {
                                            <li>@holding.InstrumentId: @holding.Size</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p class="no-holdings">No holdings</p>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<ClientData> clients;
    private Dictionary<Guid, List<HoldingData>> holdings = new();
    private System.Timers.Timer timer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        clients = DbHandler.GetAllClients();
        holdings = clients.ToDictionary(
            client => client.ClientId,
            client => DbHandler.GetClientHoldings(client.ClientId)
        );
        StateHasChanged();
        const int threeSecondsInMilliseconds = 3000;
        Task.Delay(threeSecondsInMilliseconds).ContinueWith(_ => InvokeAsync(LoadData));
    }
}
